"""\nFastAPI backend for Bizz – business automation toolkit.\nIncludes:\n  • AI Assistant chat with simple in‑memory context\n  • Data upload endpoint\n  • Health check\n  • Header‑based API‑key authentication\n\nSwagger/OpenAPI docs are auto‑generated at /docs.\n
"""\n\nimport os\nfrom typing import List, Dict\nfrom fastapi import FastAPI, HTTPException, Depends, Header\nfrom fastapi.middleware.cors import CORSMiddleware\nfrom pydantic import BaseModel\n\n# ----------------------------------------------------\n# App & CORS\n# ----------------------------------------------------\n\napp = FastAPI(\n title="Bizz API",\n    description="Backend services for Bizz automation platform",\n    version="0.1.0",\n)\n\napp.add_middleware(\n    CORSMiddleware,\n    allow_origins=["*"],\n    allow_credentials=True,\n    allow_methods=["*"],\n    allow_headers=["*"],\n)\n\n# ----------------------------------------------------\n# Auth dependency (simple API‑key header)\n# ----------------------------------------------------\n\nAPI_KEY = os.getenv("API_KEY", "change‑me")\n\nasync def verify_key(x_api_key: str = Header(..., description="API key for protected routes")):\n    if x_api_key != API_KEY:\n        raise HTTPException(status_code=401, detail="Invalid API key")\n\n# ----------------------------------------------------\n# AI Assistant (in‑memory)\n# ----------------------------------------------------\n\nassistant_memory: List[Dict[str, str]] = [] 
n# ----------------------------------------------------# crude demo memory – replace with DB/Redis\n\nclass ChatRequest(BaseModel):\n    message: str\n\n@app.post("/api/assistant/start", tags=["assistant"])\nasync def launch_ai():\n    """Ping endpoint used by the front‑end button."""\n    return {"message": "ProjectPilot AI assistant activated!"}\n\n\n@app.post("/api/assistant/chat", tags=["assistant"], dependencies=[Depends(verify_key)])\nasync def chat(req: ChatRequest):\n    """Very simple echo‑style chat that stores last 50 messages in memory."""\n    assistant_memory.append({"role": "user", "content": req.message})\n    response = f"You said: {req.message}"\n    assistant_memory.append({"role": "assistant", "content": response})\n    # keep memory bounded\n    del assistant_memory[:-50]\n    return {"response": response, "memory": assistant_memory[-10:]}\n\n# ----------------------------------------------------\n# Data upload\n# ----------------------------------------------------
\n\nclass UploadPayload(BaseModel):\n    filename: str\n    content: str\n\n@app.post("/api/data/upload", tags=["data"], dependencies=[Depends(verify_key)])\nasync def upload_file(data: UploadPayload):\n    """Accept raw file content (string) – expand with S3/DB storage in production."""\n    if not data.content:\n        raise HTTPException(status_code=400, detail="Empty content")\n    return {"status": "success", "filename": data.filename}\n\n# ----------------------------------------------------\n# Health check\n# ----------------------------------------------------\n\n@app.get("/api/health", tags=["misc"])\nasync def health():\n    return {"status": "ok"}\n\n# ----------------------------------------------------\n# Root\n# ----------------------------------------------------\n\n@app.get("/", include_in_schema=False)\nasync def root():\n    return {"message": "Welcome to Bizz API"}
